{"version":3,"sources":["../src/json2json.js"],"names":["elastic_client","Client","hosts","protocol","host","es","port","bulk_tweets","tweets_list","filePath","stream","createReadStream","flags","encoding","buf","flag","on","d","toString","pump","count","pushElastic","pos","indexOf","slice","processLine","line","length","substr","obj","JSON","parse","publish","data","tweet","author","get","avatar","body","date","screenname","favs","retweets","loc_name","loc_lat","loc_lon","push","console","log","i","index","_index","_type","bulk","maxRetries","type","err","resp","status","items"],"mappings":"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","file":"json2json.js","sourcesContent":["import fs from 'fs';\nimport _ from 'lodash';\nimport elasticHandler from './elasticHandler';\nimport elasticsearch from 'elasticsearch';\nimport config from './config';\n\nconst elastic_client = new elasticsearch.Client({\n    hosts: [\n        {\n            protocol: 'https',\n            host: config.es.host,\n            port: 443\n        }\n        // ,\n        // {\n        //     host: 'localhost',\n        //     port: 9200\n        // }\n    ]\n});\n\n    // elastic_client.count({index: 'tweets',type: 'tweet'},function(err,resp,status) {  \n    //     console.log(\"tweets\",resp);\n    // });\n\n// elastic_client.indices.create({\n//     index: 'tweets'\n// },(err, resp, status) => {\n//     if (err) {\n//         console.log(err);\n//     }\n//     console.log('success');\n//     // elasticHandler(elastic_client);\n// });\n\n//Load json data here, pass it along to client to bulk upload\nlet bulk_tweets = [];\nlet tweets_list = [];\nlet filePath = './finaltweets2.json';\nvar stream = fs.createReadStream(filePath, {flags: 'r', encoding: 'utf-8'});\nvar buf = '';\nvar flag = true;\nstream.on('data', function(d) {\n    buf += d.toString(); // when data is read, stash it in a string buffer\n    pump(); // then process the buffer\n    if (count > 100 && flag) {\n        flag = false;\n        pushElastic();\n    }\n});\n\nfunction pump() {\n    var pos;\n\n    while ((pos = buf.indexOf('\\n')) >= 0) { // keep going while there's a newline somewhere in the buffer\n        if (pos == 0) { // if there's more than one newline in a row, the buffer will now start with a newline\n            buf = buf.slice(1); // discard it\n            continue; // so that the next iteration will start with data\n        }\n        processLine(buf.slice(0,pos)); // hand off the line\n        buf = buf.slice(pos+1); // and slice the processed data off the buffer\n    }\n}\n\nfunction processLine(line) { // here's where we do something with a line\n\n    if (line[line.length-1] == '\\r') line=line.substr(0,line.length-1); // discard CR (0x0D)\n\n    if (line.length > 0) { // ignore empty lines\n        var obj = JSON.parse(line); // parse the JSON\n        // console.log(obj); // do something with the data here!\n        publish(obj);\n    }\n}\n\nlet count = 0;\nfunction publish(data) {\n        let tweet = {\n            author: _.get(data, 'user.name'),\n            avatar: _.get(data,'user.profile_image_url'),\n            body: _.get(data, 'text'),\n            date: _.get(data, 'created_at'),\n            screenname: _.get(data, 'user.screen_name'),\n            favs: _.get(data,'favorite_count'),\n            retweets: _.get(data,'retweet_count'),\n            loc_name: _.get(data,'place.full_name'),\n            loc_lat: _.get(data,'coordinates.coordinates[1]') || _.get(data,'geo.coordinates[0]'),\n            loc_lon: _.get(data,'coordinates.coordinates[0]')|| _.get(data,'geo.coordinates[1]')\n        };\n        // console.log(tweet);\n        \n        if (tweet.loc_lat && tweet.loc_lon) {\n            // console.log(tweet);\n            count+=1;\n            // console.log(count, tweet);\n            tweets_list.push(tweet);\n        }\n}\n\nfunction pushElastic() {\n    console.log('end', tweets_list.length);\n\n    (function(tweets_list){\n        let i = 0;\n        for(let tweet in tweets_list) { //tweet is an index. why bro?\n            i = i+1;\n            bulk_tweets.push(\n                { index: {_index: 'tweets', _type: 'tweet'} },\n                tweets_list[tweet]\n            );\n        }\n\n        elastic_client.bulk({\n            maxRetries: 5,\n            index: 'tweets',\n            type: 'tweet',\n            body: bulk_tweets\n        },function(err,resp,status) {\n            if (err) {\n                console.log(err);\n            }\n            else {\n                console.log('this many indices added - ',resp.items.length);\n            }\n        });\n    })(tweets_list);\n    tweets_list = [];\n    bulk_tweets = [];\n}"]}