{"version":3,"sources":["../src/server.js"],"names":["app","port","process","env","PORT","engine","renderFile","set","twit","twitter2","stream","get","index","use","static","__dirname","server","listen","io","require","on","socket","emit","data","runStream","console","log","words","s","limitMessage","response","setTimeout","error","destroy","warning","disconnectMessage"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;;;AAEA;;AAbA;AAcA,IAAMA,MAAM,wBAAZ;;AANA;;AAOA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAJ,IAAIK,MAAJ,CAAW,MAAX,EAAmB,eAAKC,UAAxB;AACAN,IAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;AACA;;AAEA,IAAMC,OAAO,sBAAY,iBAAOC,QAAnB,CAAb;AACA,IAAIC,SAAS,IAAb;AACA;AACAV,IAAIW,GAAJ,CAAQ,GAAR,EAAa,iBAAOC,KAApB;AACA;AACA;AACAZ,IAAIa,GAAJ,CAAQ,GAAR,EAAa,kBAAQC,MAAR,CAAeC,YAAY,YAA3B,CAAb;;AAEA;AACA,IAAMC,SAAShB,IAAIiB,MAAJ,CAAWhB,IAAX,CAAf;;AAEA,IAAMiB,KAAKC,QAAQ,WAAR,EAAqBF,MAArB,CAA4BD,MAA5B,CAAX;AACAE,GAAGE,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;AAClCA,WAAOC,IAAP,CAAY,kBAAZ;AACAD,WAAOD,EAAP,CAAU,cAAV,EAA0B,UAAUG,IAAV,EAAgB;AACtC;AACA,YAAIb,WAAW,IAAf,EAAqB;AACjBc;AACH;AACJ,KALD;AAMH,CARD;;AAUA;AACA,IAAIA,YAAY,SAAZA,SAAY,GAAM;AAClBC,YAAQC,GAAR,CAAY,sBAAZ;AACAlB,SAAKE,MAAL,CAAY,iBAAZ,EAA+B,iBAAOA,MAAP,CAAciB,KAA7C,EAAoD,UAASC,CAAT,EAAY;AAC5DlB,iBAASkB,CAAT;AACAlB,eAAOU,EAAP,CAAU,OAAV,EAAmB,UAASS,YAAT,EAAuB;AACtC,mBAAOJ,QAAQC,GAAR,CAAYG,YAAZ,CAAP;AACH,SAFD;AAGAnB,eAAOU,EAAP,CAAU,KAAV,EAAiB,UAACU,QAAD,EAAc;AAC3BC,uBAAWP,SAAX,EAAsB,KAAtB;AACH,SAFD;AAGAd,eAAOU,EAAP,CAAU,OAAV,EAAmB,UAASY,KAAT,EAAgB;AAC/BP,oBAAQC,GAAR,CAAYM,KAAZ;AACAtB,mBAAOuB,OAAP;AACAF,uBAAWP,SAAX,EAAsB,KAAtB;AACH,SAJD;AAKAd,eAAOU,EAAP,CAAU,SAAV,EAAqB,UAACU,QAAD,EAAc;AAC/BL,oBAAQC,GAAR,CAAY,+BAAZ;AACH,SAFD;AAGAhB,eAAOU,EAAP,CAAU,SAAV,EAAqB,UAASc,OAAT,EAAkB;AACnC,mBAAOT,QAAQC,GAAR,CAAYQ,OAAZ,CAAP;AACH,SAFD;AAGAxB,eAAOU,EAAP,CAAU,YAAV,EAAwB,UAASe,iBAAT,EAA4B;AAChD,mBAAOV,QAAQC,GAAR,CAAYS,iBAAZ,CAAP;AACH,SAFD;AAGA,qCAAczB,MAAd,EAAsBQ,EAAtB,EAtB4D,CAsBjC;AAC9B,KAvBD;AAwBH,CA1BD;;AA4BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"server.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport mongoose from 'mongoose';\n// import twitter from 'ntwitter'; //old twitter node pkg..\nimport Twitter from 'twitter';\n\nimport config from './config';\nimport routes from './routes';\nimport streamHandler from './streamHandler';\nimport elasticHandler from './elasticHandler';\n\n// import _ from 'lodash';\nimport swig from 'swig';\nimport elasticsearch from 'elasticsearch';\nimport fs from 'fs';\n\n//Express instance constant\nconst app = express();\nconst port = process.env.PORT || 8080;\napp.engine('html', swig.renderFile);\napp.set('view engine', 'html');\n\n//connecting to mongoDB\n// mongoose.connect('mongodb://localhost/react-tweets');\n\nconst twit = new Twitter(config.twitter2);\nlet stream = null;\n//Mininal route handling.. Callback function is stored in routes\napp.get('/', routes.index);\n//setting location of static files, app has access now\n// console.log(__dirname);\napp.use('/', express.static(__dirname + \"../public/\"));\n\n//start server, its running\nconst server = app.listen(port);\n\nconst io = require('socket.io').listen(server);\nio.on('connection', function (socket) {\n    socket.emit('server connected');\n    socket.on('start stream', function (data) {\n        // elasticHandler(elastic_client, io, {});\n        if (stream === null) {\n            runStream();\n        }\n    });\n});\n\n//define stream api, bounding box, handler to process it and store in DB, etc\nlet runStream = () => {\n    console.log('stream running again');\n    twit.stream('statuses/filter', config.stream.words, function(s) {\n        stream = s;\n        stream.on('limit', function(limitMessage) {\n            return console.log(limitMessage);\n        });\n        stream.on('end', (response) => {\n            setTimeout(runStream, 60000);\n        });\n        stream.on('error', function(error) {\n            console.log(error);\n            stream.destroy();\n            setTimeout(runStream, 60000);\n        });\n        stream.on('destroy', (response) => {\n            console.log('silently destroyed connection');\n        });\n        stream.on('warning', function(warning) {\n            return console.log(warning);\n        });\n        stream.on('disconnect', function(disconnectMessage) {\n            return console.log(disconnectMessage);\n        });\n        streamHandler(stream, io); //handles data\n    });\n};\n\n//start it\n//runStream();\n\n//Elastic Search Code\n// const elastic_client = new elasticsearch.Client({\n//     hosts: [\n//         {\n//             protocol: 'https',\n//             host: config.es.host,\n//             port: 443\n//         }\n//         // ,\n//         // {\n//         //     host: 'localhost',\n//         //     port: 9200\n//         // }\n//     ]\n// });\n\n// elastic_client.cluster.health({},function(err,resp,status) {  \n//   console.log(\"-- Client Health --\",resp);\n// });\n// elastic_client.indices.create({\n//     index: 'tweets'\n// },(err, resp, status) => {\n//     if (err) {\n//         console.log(err);\n//     }\n//     // elasticHandler(elastic_client);\n// });\n\n//Load json data here, pass it along to client to bulk upload\n// let bulk_tweets = [];\n// const tweets_list = require('../tweets.json'); //mind that path yo\n// (function(tweets_list){\n//     let i = 0;\n//     for(let tweet in tweets_list) { //tweet is an index. why bro?\n//         i = i+1;\n//         bulk_tweets.push(\n//             { index: {_index: 'tweets', _type: 'tweet'} },\n//             tweets_list[tweet]\n//         );\n//         if (i > 100) break;\n//     }\n//     elastic_client.bulk({\n//         maxRetries: 5,\n//         index: 'tweets',\n//         type: 'tweet',\n//         body: bulk_tweets\n//     },function(err,resp,status) {\n//         if (err) {\n//             console.log(err);\n//         }\n//         else {\n//             console.log('this many indices added - ',resp.items.length);\n//         }\n//         elasticHandler(elastic_client, io, {});\n//     });\n// })(tweets_list);\n// elasticHandler(elastic_client, io, {});"]}