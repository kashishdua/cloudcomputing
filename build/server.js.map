{"version":3,"sources":["../src/server.js"],"names":["app","port","process","env","PORT","set","twit","twitter2","stream","elastic_client","Client","hosts","protocol","host","es","server","listen","io","require","on","socket","emit","data","runStream","get","req","res","search_term","tweets","ESSearch","console","log","length","render","query","json","use","static","__dirname","words","s","limitMessage","response","setTimeout","error","destroy","warning","disconnectMessage"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport mongoose from 'mongoose';\n// import twitter from 'ntwitter'; //old twitter node pkg..\nimport Twitter from 'twitter';\n\nimport config from './config';\nimport routes from './routes';\nimport streamHandler from './streamHandler';\nimport elasticHandler from './elasticHandler';\nimport ESH from './elasticHandlerSearch';\n\n// import _ from 'lodash';\n// import swig from 'swig';\nimport ejs from 'ejs';\nimport elasticsearch from 'elasticsearch';\nimport fs from 'fs';\n\n//Express instance constant\nconst app = express();\nconst port = process.env.PORT || 8080;\n// app.engine('html', swig.renderFile);\napp.set('view engine', 'ejs');\n\n//connecting to mongoDB\n// mongoose.connect('mongodb://localhost/react-tweets');\n\nconst twit = new Twitter(config.twitter2);\nlet stream = null;\n\nconst elastic_client = new elasticsearch.Client({\n    hosts: [\n        {\n            protocol: 'https',\n            host: config.es.host,\n            port: 443\n        }\n    ]\n});\n\n//start server, its running\nconst server = app.listen(port);\n\nconst io = require('socket.io').listen(server);\nio.on('connection', function (socket) {\n    socket.emit('server connected');\n    socket.on('start stream', function (data) {\n        // elasticHandler(elastic_client, io, {});\n        if (stream === null) {\n            runStream();\n        }\n    });\n});\n\n//Mininal route handling.. Callback function is stored in routes\napp.get('/', (req, res) => {\n        // res.render('index');\n        // Tweet.getTweets(0, function(tweets) {\n        //     res.send(tweets);\n        // });\n    let search_term = '';\n    let tweets = ESH.ESSearch(elastic_client, io, search_term, (tweets) => {\n        console.log('route callback', tweets.length);\n        res.render('index', {\n            tweets: tweets\n        });\n    });\n});\n\napp.get('/search', (req, res) => {\n    let search_term = req.query.search_term || '';\n    let tweets = ESH.ESSearch(elastic_client, io, search_term, (tweets) => {\n        console.log('route callback', search_term, tweets.length);\n        res.json(tweets);\n    });\n});\n\n//setting location of static files, app has access now\n// console.log(__dirname);\napp.use('/', express.static(__dirname + \"../public/\"));\n\n//define stream api, bounding box, handler to process it and store in DB, etc\nlet runStream = () => {\n    console.log('stream running again');\n    twit.stream('statuses/filter', config.stream.words, function(s) {\n        stream = s;\n        stream.on('limit', function(limitMessage) {\n            return console.log(limitMessage);\n        });\n        stream.on('end', (response) => {\n            setTimeout(runStream, 60000);\n        });\n        stream.on('error', function(error) {\n            console.log(error);\n            stream.destroy();\n            setTimeout(runStream, 60000);\n        });\n        stream.on('destroy', (response) => {\n            console.log('silently destroyed connection');\n        });\n        stream.on('warning', function(warning) {\n            return console.log(warning);\n        });\n        stream.on('disconnect', function(disconnectMessage) {\n            return console.log(disconnectMessage);\n        });\n        streamHandler(stream, io); //handles data\n    });\n};\n\n//start it\n//runStream();\n\n//Elastic Search Code\n// const elastic_client = new elasticsearch.Client({\n//     hosts: [\n//         {\n//             protocol: 'https',\n//             host: config.es.host,\n//             port: 443\n//         }\n//         // ,\n//         // {\n//         //     host: 'localhost',\n//         //     port: 9200\n//         // }\n//     ]\n// });\n\n// elastic_client.cluster.health({},function(err,resp,status) {  \n//   console.log(\"-- Client Health --\",resp);\n// });\n// elastic_client.indices.create({\n//     index: 'tweets'\n// },(err, resp, status) => {\n//     if (err) {\n//         console.log(err);\n//     }\n//     // elasticHandler(elastic_client);\n// });\n\n//Load json data here, pass it along to client to bulk upload\n// let bulk_tweets = [];\n// const tweets_list = require('../tweets.json'); //mind that path yo\n// (function(tweets_list){\n//     let i = 0;\n//     for(let tweet in tweets_list) { //tweet is an index. why bro?\n//         i = i+1;\n//         bulk_tweets.push(\n//             { index: {_index: 'tweets', _type: 'tweet'} },\n//             tweets_list[tweet]\n//         );\n//         if (i > 100) break;\n//     }\n//     elastic_client.bulk({\n//         maxRetries: 5,\n//         index: 'tweets',\n//         type: 'tweet',\n//         body: bulk_tweets\n//     },function(err,resp,status) {\n//         if (err) {\n//             console.log(err);\n//         }\n//         else {\n//             console.log('this many indices added - ',resp.items.length);\n//         }\n//         elasticHandler(elastic_client, io, {});\n//     });\n// })(tweets_list);\n// elasticHandler(elastic_client, io, {});"]}