<!DOCTYPE html>
<html>
  <head>
    <title>Assignment - Map with Markers (Tweets)</title>
    <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js"></script>

    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<style>
html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
#map {
      height: 100%;
      width: 1023px;
    }
    h1 {
    text-align: center;
    }
</style>

  </head>
  <body>
    <h1>Tweet Map V1</h1>
    <div class="col-xs-2">
    <p> <b>Filter based on Keyword</b></p>
    <select id =keys>
      <option value="" selected="selected">No Filter</option>
      <option value="hillary">Hillary</option>
      <option value="wikiLeaks">WikiLeaks</option>
      <option value="pumpkin">Pumpkin</option>
      <option value="sun">Sun</option>
    </select>
      </div>

    <div class="col-xs-10" id="map">
    </div>
    
  <script>
    var map;
    var markers=[];
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 0, lng: 0},
          draggable: false,
          zoom: 2,
          minZoom:2 
        });
        map.addListener('zoom_changed', function() {
         if(map.getZoom()>2){
          map.draggable=true;
         }else{
          map.draggable=false;
         }  
       
       });
       var Tweets = <%- JSON.stringify(tweets) %>;
       renderTweets(Tweets);
    }
    $('#keys').change(function(){
        var keyword=$(this).find("option:selected").attr('value')
        $.ajax({
          url: "/search",
          data:{search_term:keyword},
          success: function(result){
          //Empty Map or Filter out from all
            for (var i = 0; i < markers.length; i++) {
              markers[i].setMap(null);
            }
            markers = [];
            //Set Markers
            var Tweets = result;
            renderTweets(Tweets);
          }});
      });
    function renderTweets(Tweets){
      var results= Tweets;
       for (var i = 0; i < results.length; i++) {
          var tweet=results[i];
          var tweet_status=tweet.body;
          console.log(tweet_status)
          var coordinates={}
          if(!tweet.loc_lat && !tweet.loc_lon){
            var address = tweet.loc_name;

            var geocoder = new google.maps.Geocoder();
            var geoOptions = {
              address: address
            };
            geocoder.geocode(geoOptions, callback(tweet_status));
          }
          else{
            coordinates["lat"]=Number(tweet.loc_lat);
            coordinates["lng"]=Number(tweet.loc_lon);
          
            markers.push(new google.maps.Marker({
              position: coordinates,
              title:tweet_status,
              map: map
            }));
          }
       }
    }
    function callback(tweet_status) {
    return function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        var marker=new google.maps.Marker({
              position: results[0].geometry.location,
              title:tweet_status,
              map: map
            });
      markers.push(marker);
      } else {
        console.log("Geocode failed " + status);
      }
    };
  }
	</script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCazhbGl7iOujK4r0FmGgpJjOhTdpX48J0&callback=initMap"
    async defer></script>
	</body>
</html>